from machine import Pin, SPI
from ssd1306 import SSD1306_SPI
import framebuf
from time import sleep
from utime import sleep_ms
import network  # handles connecting to WiFi
import urequests  # handles making and servicing network requests

try:
    from code_secrets import secrets
except ImportError:
    print("Secrets including geo are kept in code_secrets.py, please add them there!")
    raise

# BOUNDS_BOX = "51.6,51.4,-0.3,-0.1"
BOUNDS_BOX = secrets["bounds_box"]
# area to search for flights: top latitude, bottom latitude, left longitude, right longitude (so this example is central London)

# URLs
FLIGHT_SEARCH_HEAD = "https://data-live.flightradar24.com/zones/fcgi/feed.js?bounds="
FLIGHT_SEARCH_TAIL = "&faa=1&satellite=1&mlat=1&flarm=1&adsb=1&gnd=0&air=1&vehicles=0&estimated=0&maxage=14400&gliders=0&stats=0&ems=1&limit=1"
FLIGHT_SEARCH_URL = FLIGHT_SEARCH_HEAD + BOUNDS_BOX + FLIGHT_SEARCH_TAIL
# Used to get more flight details with a fr24 flight ID from the initial search
FLIGHT_LONG_DETAILS_HEAD = "https://data-live.flightradar24.com/clickhandler/?flight="

# Request headers
rheaders = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106.0",
    "cache-control": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
    "accept": "application/json",
}


# Look for flights overhead
def get_flights():
    try:
        # response = json.loads(matrixportal.fetch())
        response = urequests.get(url=FLIGHT_SEARCH_URL, headers=rheaders).json()
        print(response)
    except:
        print("Error during fetch")
        return False
    if len(response) == 3:
        # print ("Flight found.")
        for flight_id, flight_info in response.items():
            # the JSON has three main fields, we want the one that's a flight ID
            if not (flight_id == "version" or flight_id == "full_count"):
                if len(flight_info) > 13:
                    return flight_id
    else:
        return False


def display_logo(oled):
    oled.text("Booting up ^", 0, 16 * 2)
    oled.show()
    # Display the Raspberry Pi logo on the OLED
    buffer = bytearray(
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|?\x00\x01\x86@\x80\x01\x01\x80\x80\x01\x11\x88\x80\x01\x05\xa0\x80\x00\x83\xc1\x00\x00C\xe3\x00\x00~\xfc\x00\x00L'\x00\x00\x9c\x11\x00\x00\xbf\xfd\x00\x00\xe1\x87\x00\x01\xc1\x83\x80\x02A\x82@\x02A\x82@\x02\xc1\xc2@\x02\xf6>\xc0\x01\xfc=\x80\x01\x18\x18\x80\x01\x88\x10\x80\x00\x8c!\x00\x00\x87\xf1\x00\x00\x7f\xf6\x00\x008\x1c\x00\x00\x0c \x00\x00\x03\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    )
    fb = framebuf.FrameBuffer(buffer, 32, 32, framebuf.MONO_HLSB)

    oled.blit(fb, 96, 15)
    oled.show()


def display_pikachu(oled):
    # Display the Raspberry Pi logo on the OLED
    buffer = bytearray(
        b"\x00\x00\x01\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x80\x00\x00\x00\x00\x00\x00\x00\x01\xe0\x00\x00\x00\x00\x00x@\x00\x00\x00\x00\x00\x00\x00\x1f\xe0\x00\x00\x00\x00\x008\x10\x00\x00\x00\x00\x00\x00\x00\xff\xc0\x00\x00\x00\x00\x008\x0c\x00\x00\x00\x00\x00\x00\x03\xff\x80\x00\x00\x00\x00\x00\x18\x02\x00\x00\x00\x00\x00\x00\x1c\x7f\x80\x00\x00\x00\x00\x00\x0c\x01\x80\x00\x00\x00\x00\x00`\x7f\x00\x00\x00\x00\x00\x00\x0c\x00\xc0\x00\x00\x00\x00\x01\x80~\x00\x00\x00\x00\x00\x00\x04\x000\x00\x00\x00\x00\x0e\x00|\x00\x00\x00\x00\x00\x00\x06\x00\x18\x00\x00\x00\x008\x00\xfc\x00\x00\x00\x00\x00\x00\x03\x00\x06\x00\x00\x00\x00\xe0\x00\xf8\x00\x00\x00\x00\x00\x00\x01\x00\x03\x00\x00\x00\x03\x80\x00\xf0\x00\x00\x00\x00\x00\x00\x01\x80\x00\x80\x00\x00\x0c\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00\xc0\x00`\x00\x000\x00\x01\xc0\x00\x00\x00\x00\x00\x00\x00\xc0\x00?\xff\xff\xe0\x00\x01\x80\x00\x00\x00\x00\x00\x00\x00`\x00\x10\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03 \x00\x00\x00\x00\x01\x80\x00\x00\x00\x00\x00\x00\x00\x00\x01\xc0\x00\x00\x00\x00C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00&\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x80\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xe0\x00\x05\xc0\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x04p\x00\x08\xe0\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x04p\x00\x08\xe0\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x06\xf0\x00\r\xe0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xf0\x00\x07\xe0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x03\xf0\x00\x07\xe0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x01\xe0\x00\x01\xc0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\xf0\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\xf0\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xc0\x000\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xe0\x00\x00\x00\x0f\x81\x80\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xf0\x00\x00\x00\x1f\xc0\x80\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xf0\x00\x00\x00\x1f\xe0\x80\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xf0\x00\x00\x00\x1f\xe0\x80\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x01\xfe\x00\x1f\xe0\xc0\x00\x00\x00\x00\x00\x00\x00\x007\xe0\x03\xf3\x80\x1f\xe0\xc0\x00\x00\x00\x00\x00\x00\x00\x00#\xc0\x03\xc1\x80\x1f\xc0@\x00\x00\x00\x00\x00\x00\x00\x000\x00\x03\x80\x80\x0f\xc0@\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x03\x00\xc0\x07\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x03\x00\x80\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x01\x81\x80\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x01\xc7\x80\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x7f\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00"
    )
    fb = framebuf.FrameBuffer(buffer, 128, 64, framebuf.MONO_HLSB)

    oled.invert(0)
    oled.blit(fb, 0, 0)
    oled.show()


def display_plane(oled):
    # open image, put your image here
    with open("plane-icon.pbm", "rb") as f:
        f.readline()  # number
        f.readline()  # Creator
        f.readline()  # Dimensions
        data = bytearray(f.read())

    fb = framebuf.FrameBuffer(data, 128, 64, framebuf.MONO_HLSB)

    for i in range(0, 112 * 2):
        # oled.invert(0)
        oled.blit(fb, 128 - i, 0)
        oled.show()
        sleep_ms(6)


def checkConnection():
    global wlan
    # Fill in your network name (ssid) and password here:
    print("Check and reconnect WiFi")
    attempts = 10
    attempt = 1
    while (wlan.isconnected() == False) and attempt < attempts:
        print("Connect attempt " + str(attempt) + " of " + str(attempts))
        try:
            print("Attempt WiFi connect...")
            wlan.connect(secrets["ssid"], secrets["password"])
        except Exception as e:
            print(e.__class__.__name__ + "----------------ERROR---------------")
            print(e)
        attempt += 1
    if wlan.isconnected() == True:
        print(f"Successfully connected. Status: {wlan.status()}")
    else:
        print(f"Failed to connect. Status: {wlan.status()}")


# Connect to network
wlan = network.WLAN(network.STA_IF)
wlan.active(True)

spi = SPI(0, 100000, mosi=Pin(19), sck=Pin(18))
# oled = SSD1306_SPI(WIDTH, HEIGHT, spi, dc,rst, cs) use GPIO PIN NUMBERS
oled = SSD1306_SPI(128, 64, spi, Pin(17), Pin(20), Pin(16))

oled.fill(0)
oled.show()

display_logo(oled)
sleep(2)

checkConnection()

display_pikachu(oled)
sleep(2)

print(get_flights())

display_plane(oled)

# oled.fill(0)
# oled.show()
